/*
 * This file is part of Baritone.
 * Distributed under the GNU LGPL v3 or later.
 */

group = 'com.github.rykcbaool'
version = 'v1.11.3'

buildscript {
    repositories {
        maven { name = 'forge'; url = 'https://files.minecraftforge.net/maven' }
        maven { name = 'SpongePowered'; url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'
apply from: 'hacks.gradle'
apply plugin: 'org.spongepowered.mixin'
ext.doHackyStuff(Class.forName('net.minecraftforge.gradle.mcp.task.GenerateSRG'))

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    api { compileClasspath += main.compileClasspath }
    main { compileClasspath += api.output + schematica_api.output }
    test {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
        runtimeClasspath += compileClasspath
    }
    launch {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
        runtimeClasspath += compileClasspath
    }
    schematica_api { compileClasspath += main.compileClasspath }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    runs {
        def nativesOutput = extractNatives.output
        println("[Baritone] Detected natives: ${nativesOutput}")
        client {
            workingDirectory project.file('run')
            source sourceSets.launch
            main 'net.minecraft.launchwrapper.Launch'

            args '--gameDir', '.', '--version', '1.12.2'
            args '--assetsDir', downloadAssets.output
            args '--assetIndex', '{asset_index}'
            args '--accessToken', 'INVALID'
            args '--tweakClass', 'baritone.launch.BaritoneTweaker'

            jvmArgs "-Dorg.lwjgl.librarypath=${nativesOutput}"
        }
    }
}

repositories {
    mavenCentral()
    maven { name = 'spongepowered-repo'; url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { name = 'impactdevelopment-repo'; url = 'https://impactdevelopment.github.io/maven/' }
    maven { name = 'babbaj-repo'; url = 'https://babbaj.github.io/maven/' }
}

afterEvaluate {
    configurations.minecraft { exclude group: 'net.minecraftforge', module: 'mergetool' }

    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        def arch = System.getProperty("os.arch").toLowerCase()
        println("Detected Mac OS X running on ${arch}")
        if (arch == "aarch64") {
            println("Configuring aarch64 dependencies.")
            configurations.minecraft { exclude group: 'ca.weblite', module: 'java-objc-bridge' }
            dependencies {
                minecraft files("libs/lwjgl-platform-2.9.4-nightly-20150209-natives-osx.jar")
                minecraft files("libs/java-objc-bridge-1.1.jar")
                minecraft('net.java.dev.jna:jna') { version { strictly '5.12.1' } }
            }
        }
    }
}

dependencies {
    minecraft group: 'net.minecraft', name: 'joined', version: '1.12.2'
    implementation('net.minecraft:launchwrapper:1.12') { transitive = false }

    def asm = '9.5'
    implementation "org.ow2.asm:asm:$asm"
    implementation "org.ow2.asm:asm-tree:$asm"
    implementation "org.ow2.asm:asm-commons:$asm"
    implementation "org.ow2.asm:asm-analysis:$asm"
    implementation "org.ow2.asm:asm-util:$asm"

    launchImplementation 'com.github.ImpactDevelopment:SimpleTweaker:1.2'
    launchImplementation('org.spongepowered:mixin:0.7.11-SNAPSHOT') { transitive = false }
    launchAnnotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT:processor'
    launchImplementation 'dev.babbaj:nether-pathfinder:1.3.0'
    implementation 'dev.babbaj:nether-pathfinder:1.3.0'

    testImplementation 'junit:junit:4.12'
}

mixin {
    add sourceSets.launch, 'mixins.baritone.refmap.json'
}

javadoc {
    options.addStringOption('Xwerror', '-quiet')
    options.linkSource true
    options.encoding "UTF-8"
    source = sourceSets.api.allJava
    classpath += sourceSets.api.compileClasspath
}

jar {
    from sourceSets.launch.output, sourceSets.api.output
    if (!project.hasProperty("baritone.forge_build")) {
        exclude "**/BaritoneForgeModXD.class"
        exclude "**/mods.toml"
    }
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    manifest {
        attributes(
            'MixinConfigs': 'mixins.baritone.json',
            'TweakClass': 'baritone.launch.BaritoneTweaker',
            'Implementation-Title': 'Baritone',
            'Implementation-Version': version
        )
    }
}

task proguard(type: ProguardTask) {
    url 'https://downloads.sourceforge.net/project/proguard/proguard/6.0/proguard6.0.3.zip'
    extract 'proguard6.0.3/lib/proguard.jar'
}

task createDist(type: CreateDistTask, dependsOn: proguard)
build.finalizedBy(createDist)

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
